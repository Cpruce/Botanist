{
  "name": "store",
  "description": "A localStorage wrapper for all browsers without using cookies or flash. Uses localStorage, globalStorage, and userData behavior under the hood",
  "version": "1.3.17",
  "homepage": "https://github.com/marcuswestin/store.js",
  "author": {
    "name": "Marcus Westin",
    "email": "narcvs@gmail.com",
    "url": "http://marcuswest.in"
  },
  "contributors": [
    {
      "name": "Matt Pizzimenti",
      "email": "mjpizz+github@gmail.com",
      "url": "http://mjpizz.com"
    },
    {
      "name": "Long Ouyang",
      "url": "https://github.com/longouyang"
    },
    {
      "name": "Paul Irish",
      "url": "http://paulirish.com"
    },
    {
      "name": "Guillermo Rauch",
      "email": "rauchg@gmail.com",
      "url": "https://github.com/guille"
    },
    {
      "name": "whitmer",
      "url": "https://github.com/whitmer"
    },
    {
      "name": "Steven Black",
      "email": "steveb@stevenblack.com",
      "url": "https://github.com/StevenBlack"
    },
    {
      "name": "Marcus Tucker",
      "email": "info@marcustucker.com",
      "url": "https://github.com/MarcusJT"
    },
    {
      "name": "Leonid Bugaev",
      "email": "leonsbox@gmail.com",
      "url": "https://github.com/buger"
    },
    {
      "name": "Per Eckerdal",
      "email": "per.eckerdal@gmail.com",
      "url": "https://github.com/pereckerdal"
    },
    {
      "name": "Fredrik Blomqvist",
      "url": "https://github.com/blq"
    },
    {
      "name": "Ryan Graham",
      "url": "https://github.com/rmg"
    },
    {
      "name": "Ben Rudolph",
      "url": "https://github.com/benrudolph"
    },
    {
      "name": "Haoliang Gao",
      "url": "https://github.com/popomore"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/marcuswestin/store.js.git"
  },
  "bugs": {
    "url": "http://github.com/marcuswestin/store.js/issues"
  },
  "engines": {
    "browser": "*",
    "node": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/marcuswestin/store.js/master/store.js"
    }
  ],
  "main": "store",
  "directories": {
    "lib": "."
  },
  "devDependencies": {
    "uglify-js": "v1.3.4"
  },
  "spm": {
    "main": "store.js"
  },
  "readme": "store.js\n========\n\nstore.js exposes a simple API for cross browser local storage\n\n```js\n// Store 'marcus' at 'username'\nstore.set('username', 'marcus')\n\n// Get 'username'\nstore.get('username')\n\n// Remove 'username'\nstore.remove('username')\n\n// Clear all keys\nstore.clear()\n\n// Store an object literal - store.js uses JSON.stringify under the hood\nstore.set('user', { name: 'marcus', likes: 'javascript' })\n\n// Get the stored object - store.js uses JSON.parse under the hood\nvar user = store.get('user')\nalert(user.name + ' likes ' + user.likes)\n\n// Get all stored values\nstore.getAll().user.name == 'marcus'\n\n// Loop over all stored values\nstore.forEach(function(key, val) {\n\tconsole.log(key, '==', val)\n})\n```\n\n\nHow does it work?\n------------------\nstore.js uses localStorage when available, and falls back on the userData behavior in IE6 and IE7. No flash to slow down your page load. No cookies to fatten your network requests.\n\nstore.js depends on JSON for serialization to disk.\n\n\nInstallation\n------------\nJust grab [store.min.js] or [store+json2.min.js] and include them with a script tag.\n\n\n`store.enabled` flag\n--------------------\nIf your product depends on store.js, you must check the `store.enabled` flag first:\n\n```html\n<script src=\"store.min.js\"></script>\n<script>\n\tinit()\n\tfunction init() {\n\t\tif (!store.enabled) {\n\t\t\talert('Local storage is not supported by your browser. Please disable \"Private Mode\", or upgrade to a modern browser.')\n\t\t\treturn\n\t\t}\n\t\tvar user = store.get('user')\n\t\t// ... and so on ...\n\t}\n</script>\n```\n\nLocalStorage may sometimes appear to be available but throw an error when used. An example is Safari's private browsing mode. Other browsers allow the user to temporarily disable localStorage. Store.js detects these conditions and sets the `store.enabled` flag appropriately.\n\n\nScreencast\n-----------\n[Introductory Screencast to Store.js](http://javascriptplayground.com/blog/2012/06/javascript-local-storage-store-js-tutorial) by Jack Franklin.\n\n\nContributors & Forks\n--------------------\nContributors: https://github.com/marcuswestin/store.js/graphs/contributors\n\nForks: https://github.com/marcuswestin/store.js/network/members\n\n\nIn node.js\n----------\nstore.js works as expected in node.js, assuming that global.localStorage has been set:\n\n```\nglobal.localStorage = require('localStorage')\nvar store = require('./store')\nstore.set('foo', 1)\nconsole.log(store.get('foo'))\n```\n\n\nSupported browsers\n------------------\n - Tested in iOS 4\n - Tested in iOS 5\n - Tested in iOS 6\n - Tested in Firefox 3.5\n - Tested in Firefox 3.6\n - Tested in Firefox 4.0+\n - Support dropped for Firefox < 3.5 (see notes below)\n - Tested in Chrome 5\n - Tested in Chrome 6\n - Tested in Chrome 7\n - Tested in Chrome 8\n - Tested in Chrome 10\n - Tested in Chrome 11+\n - Tested in Safari 4\n - Tested in Safari 5\n - Tested in IE6\n - Tested in IE7\n - Tested in IE8\n - Tested in IE9\n - Tested in IE10\n - Tested in Opera 10\n - Tested in Opera 11\n - Tested in Opera 12\n - Tested in Node.js v0.10.4 (with https://github.com/coolaj86/node-localStorage 1.0.2)\n\n*Private mode* Store.js may not work while browsing in private mode. This is as it should be. Check the `store.enabled` flag before relying on store.js.\n\n*Saucelabs.com rocks* Extensive browser testing of store.js is possible thanks to Saucelabs.com. Check them out, they're awesome.\n\n*Firefox 3.0 & 2.0:* Support for FF 2 & 3 was dropped in v1.3.6. If you require support for ancient versions of FF, use v1.3.5 of store.js.\n\n*Important note:* In IE6 and IE7, many special characters are not allowed in the keys used to store any key/value pair. With [@mferretti](https://github.com/mferretti)'s help, there's a suitable workaround which replaces most forbidden characters with \"___\".\n\n\nStorage limits\n--------------\n - IE6 & IE7: 1MB total, but 128kb per \"path\" or \"document\" (see http://msdn.microsoft.com/en-us/library/ms531424(v=vs.85).aspx)\n - See http://dev-test.nemikor.com/web-storage/support-test/ for a list of limits per browser\n\nUnsupported browsers\n-------------------\n - Firefox 1.0: no means (beside cookies and flash)\n - Safari 2: no means (beside cookies and flash)\n - Safari 3: no synchronous api (has asynch sqlite api, but store.js is synch)\n - Opera 9: don't know if there is synchronous api for storing data locally\n - Firefox 1.5: don't know if there is synchronous api for storing data locally\n - Microsoft IIS & IE7: With meta tag & \"charset=iso-8859-1\", things stop working. See issue #47.\n\n\nSome notes on serialization\n---------------------------\nlocalStorage, when used without store.js, calls toString on all stored values. This means that you can't conveniently store and retrieve numbers, objects or arrays:\n\n```js\nlocalStorage.myage = 24\nlocalStorage.myage !== 24\nlocalStorage.myage === '24'\n\nlocalStorage.user = { name: 'marcus', likes: 'javascript' }\nlocalStorage.user === \"[object Object]\"\n\nlocalStorage.tags = ['javascript', 'localStorage', 'store.js']\nlocalStorage.tags.length === 32\nlocalStorage.tags === \"javascript,localStorage,store.js\"\n```\n\nWhat we want (and get with store.js) is\n\n```js\nstore.set('myage', 24)\nstore.get('myage') === 24\n\nstore.set('user', { name: 'marcus', likes: 'javascript' })\nalert(\"Hi my name is \" + store.get('user').name + \"!\")\n\nstore.set('tags', ['javascript', 'localStorage', 'store.js'])\nalert(\"We've got \" + store.get('tags').length + \" tags here\")\n```\n\nThe native serialization engine of javascript is JSON. Rather than leaving it up to you to serialize and deserialize your values, store.js uses JSON.stringify() and JSON.parse() on each call to store.set() and store.get(), respectively.\n\nSome browsers do not have native support for JSON. For those browsers you should include [JSON.js](non-minified copy is included in this repo).\n\n\nNo sessionStorage/auto-expiration?\n----------------------------------\nNo. I believe there is no way to provide sessionStorage semantics cross browser. However, it is trivial to expire values on read on top of store.js:\n\n```js\nvar storeWithExpiration = {\n\tset: function(key, val, exp) {\n\t\tstore.set(key, { val:val, exp:exp, time:new Date().getTime() })\n\t},\n\tget: function(key) {\n\t\tvar info = store.get(key)\n\t\tif (!info) { return null }\n\t\tif (new Date().getTime() - info.time > info.exp) { return null }\n\t\treturn info.val\n\t}\n}\nstoreWithExpiration.set('foo', 'bar', 1000)\nsetTimeout(function() { console.log(storeWithExpiration.get('foo')) }, 500) // -> \"bar\"\nsetTimeout(function() { console.log(storeWithExpiration.get('foo')) }, 1500) // -> null\n```\n\n\nTesting\n-------\nFor a browser: Go to http://marcuswestin.github.io/store.js/test.html to test the latest version of store.js.\n\nFor a browser, locally: do `npm install node-static && ./node_modules/node-static/bin/cli.js` and go to http://localhost:8080\n\n(Note that test.html must be served over http:// or https://. This is because localStore does not work in some browsers when using the file:// protocol.)\n\nFor Nodejs: do `npm install . localStorage && node test-node.js`\n\n\n  [JSON.js]: http://www.json.org/json2.js\n  [store.min.js]: https://raw.github.com/marcuswestin/store.js/master/store.min.js\n  [store+json2.min.js]: https://raw.github.com/marcuswestin/store.js/master/store+json2.min.js\n",
  "readmeFilename": "README.md",
  "_id": "store@1.3.17",
  "dist": {
    "shasum": "1dc0212ef6a5a87d5dba45a06492f111bab42716"
  },
  "_from": "store@^1.3.17",
  "_resolved": "https://registry.npmjs.org/store/-/store-1.3.17.tgz"
}
