{
  "name": "watchpack",
  "version": "0.1.3",
  "description": "Wrapper library for directory and file watching.",
  "main": "./lib/watchpack.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/webpack/watchpack.git"
  },
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/webpack/watchpack/issues"
  },
  "homepage": "https://github.com/webpack/watchpack",
  "devDependencies": {
    "mocha": "^1.20.1",
    "rimraf": "^2.2.8",
    "should": "^4.0.4"
  },
  "dependencies": {
    "async": "^0.9.0",
    "chokidar": "^0.11.0",
    "graceful-fs": "^3.0.2"
  },
  "readme": "# watchpack\r\n\r\nWrapper library for directory and file watching.\r\n\r\n## Concept\r\n\r\nwatchpack high level API don't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\r\n\r\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\r\n* A `FileWatcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\r\n* Reference-counting is used on the `DirectoryWatcher` and `FileWatcher` to decide when to close them.\r\n* The real watchers (currently chokidar) are created by the `DirectoryWatcher`.\r\n* Files are never watched directly. This should keep the watcher count low.\r\n\r\n## API\r\n\r\n``` javascript\r\nvar Watchpack = require(\"watchpack\");\r\n\r\nvar wp = new Watchpack({\r\n\t// options:\r\n\taggregateTimeout: 1000\r\n\t// fire \"aggregated\" event when after a change for 1000ms no additonal change occured\r\n});\r\n\r\n// Watchpack.prototype.watch(string[] files, string[] directories, [number startTime])\r\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\r\n// starts watching these files and directories\r\n// calling this again will override the files and directories\r\n\r\nwp.on(\"change\", function(filePath, mtime) {\r\n\t// filePath: the changed file\r\n\t// mtime: last modified time for the changed file\r\n});\r\n\r\nwp.on(\"aggregated\", function(changes) {\r\n\t// changes: an array of all changed files\r\n});\r\n\r\n// Watchpack.prototype.pause()\r\nwp.pause();\r\n// stops emitting events, but keeps watchers open\r\n\r\n// Watchpack.prototype.close()\r\nwp.close();\r\n// stops emitting events and closes all watchers\r\n\r\n// Watchpack.prototype.getTimes()\r\nvar fileTimes = wp.getTimes();\r\n// returns an object with all know change times for files\r\n// this include timestamps from files not directly watched\r\n// key: absolute path, value: timestamp as number\r\n```\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "watchpack@0.1.3",
  "_from": "watchpack@~0.1.0"
}
